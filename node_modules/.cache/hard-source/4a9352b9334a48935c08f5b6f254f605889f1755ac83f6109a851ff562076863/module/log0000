{"type":"NormalModule","constructor":{"request":"node_modules/dynatable/jquery.dynatable.js","userRequest":"node_modules/dynatable/jquery.dynatable.js","rawRequest":"node_modules/dynatable/jquery.dynatable.js","loaders":[],"resource":"node_modules/dynatable/jquery.dynatable.js","parser":{"type":"Parser"}},"identifier":"node_modules/dynatable/jquery.dynatable.js","assigned":{"issuer":null},"build":{"built":true,"buildTimestamp":1534754703462,"cacheable":true,"meta":{},"assets":[],"fileDependencies":["node_modules/dynatable/jquery.dynatable.js"],"contextDependencies":[],"strict":false,"warnings":[],"errors":[],"_source":{"type":"OriginalSource","value":"/*\n * jQuery Dynatable plugin 0.3.1\n *\n * Copyright (c) 2014 Steve Schwartz (JangoSteve)\n *\n * Dual licensed under the AGPL and Proprietary licenses:\n *   http://www.dynatable.com/license/\n *\n * Date: Tue Jan 02 2014\n */\n//\n\n(function($) {\n  var defaults,\n      mergeSettings,\n      dt,\n      Model,\n      modelPrototypes = {\n        dom: Dom,\n        domColumns: DomColumns,\n        records: Records,\n        recordsCount: RecordsCount,\n        processingIndicator: ProcessingIndicator,\n        state: State,\n        sorts: Sorts,\n        sortsHeaders: SortsHeaders,\n        queries: Queries,\n        inputsSearch: InputsSearch,\n        paginationPage: PaginationPage,\n        paginationPerPage: PaginationPerPage,\n        paginationLinks: PaginationLinks\n      },\n      utility,\n      build,\n      processAll,\n      initModel,\n      defaultRowWriter,\n      defaultCellWriter,\n      defaultAttributeWriter,\n      defaultAttributeReader;\n\n  //-----------------------------------------------------------------\n  // Cached plugin global defaults\n  //-----------------------------------------------------------------\n\n  defaults = {\n    features: {\n      paginate: true,\n      sort: true,\n      pushState: true,\n      search: true,\n      recordCount: true,\n      perPageSelect: true\n    },\n    table: {\n      defaultColumnIdStyle: 'camelCase',\n      columns: null,\n      headRowSelector: 'thead tr', // or e.g. tr:first-child\n      bodyRowSelector: 'tbody tr',\n      headRowClass: null\n    },\n    inputs: {\n      queries: null,\n      sorts: null,\n      multisort: ['ctrlKey', 'shiftKey', 'metaKey'],\n      page: null,\n      queryEvent: 'blur change',\n      recordCountTarget: null,\n      recordCountPlacement: 'after',\n      paginationLinkTarget: null,\n      paginationLinkPlacement: 'after',\n      paginationClass: 'dynatable-pagination-links',\n      paginationLinkClass: 'dynatable-page-link',\n      paginationPrevClass: 'dynatable-page-prev',\n      paginationNextClass: 'dynatable-page-next',\n      paginationActiveClass: 'dynatable-active-page',\n      paginationDisabledClass: 'dynatable-disabled-page',\n      paginationPrev: 'Previous',\n      paginationNext: 'Next',\n      paginationGap: [1,2,2,1],\n      searchTarget: null,\n      searchPlacement: 'before',\n      perPageTarget: null,\n      perPagePlacement: 'before',\n      perPageText: 'Show: ',\n      recordCountText: 'Showing ',\n      processingText: 'Processing...'\n    },\n    dataset: {\n      ajax: false,\n      ajaxUrl: null,\n      ajaxCache: null,\n      ajaxOnLoad: false,\n      ajaxMethod: 'GET',\n      ajaxDataType: 'json',\n      totalRecordCount: null,\n      queries: {},\n      queryRecordCount: null,\n      page: null,\n      perPageDefault: 10,\n      perPageOptions: [10,20,50,100],\n      sorts: {},\n      sortsKeys: null,\n      sortTypes: {},\n      records: null\n    },\n    writers: {\n      _rowWriter: defaultRowWriter,\n      _cellWriter: defaultCellWriter,\n      _attributeWriter: defaultAttributeWriter\n    },\n    readers: {\n      _rowReader: null,\n      _attributeReader: defaultAttributeReader\n    },\n    params: {\n      dynatable: 'dynatable',\n      queries: 'queries',\n      sorts: 'sorts',\n      page: 'page',\n      perPage: 'perPage',\n      offset: 'offset',\n      records: 'records',\n      record: null,\n      queryRecordCount: 'queryRecordCount',\n      totalRecordCount: 'totalRecordCount'\n    }\n  };\n\n  //-----------------------------------------------------------------\n  // Each dynatable instance inherits from this,\n  // set properties specific to instance\n  //-----------------------------------------------------------------\n\n  dt = {\n    init: function(element, options) {\n      this.settings = mergeSettings(options);\n      this.element = element;\n      this.$element = $(element);\n\n      // All the setup that doesn't require element or options\n      build.call(this);\n\n      return this;\n    },\n\n    process: function(skipPushState) {\n      processAll.call(this, skipPushState);\n    }\n  };\n\n  //-----------------------------------------------------------------\n  // Cached plugin global functions\n  //-----------------------------------------------------------------\n\n  mergeSettings = function(options) {\n    var newOptions = $.extend(true, {}, defaults, options);\n\n    // TODO: figure out a better way to do this.\n    // Doing `extend(true)` causes any elements that are arrays\n    // to merge the default and options arrays instead of overriding the defaults.\n    if (options) {\n      if (options.inputs) {\n        if (options.inputs.multisort) {\n          newOptions.inputs.multisort = options.inputs.multisort;\n        }\n        if (options.inputs.paginationGap) {\n          newOptions.inputs.paginationGap = options.inputs.paginationGap;\n        }\n      }\n      if (options.dataset && options.dataset.perPageOptions) {\n        newOptions.dataset.perPageOptions = options.dataset.perPageOptions;\n      }\n    }\n\n    return newOptions;\n  };\n\n  build = function() {\n    this.$element.trigger('dynatable:preinit', this);\n\n    for (model in modelPrototypes) {\n      if (modelPrototypes.hasOwnProperty(model)) {\n        var modelInstance = this[model] = new modelPrototypes[model](this, this.settings);\n        if (modelInstance.initOnLoad()) {\n          modelInstance.init();\n        }\n      }\n    }\n\n    this.$element.trigger('dynatable:init', this);\n\n    if (!this.settings.dataset.ajax || (this.settings.dataset.ajax && this.settings.dataset.ajaxOnLoad) || this.settings.features.paginate) {\n      this.process();\n    }\n  };\n\n  processAll = function(skipPushState) {\n    var data = {};\n\n    this.$element.trigger('dynatable:beforeProcess', data);\n\n    if (!$.isEmptyObject(this.settings.dataset.queries)) { data[this.settings.params.queries] = this.settings.dataset.queries; }\n    // TODO: Wrap this in a try/rescue block to hide the processing indicator and indicate something went wrong if error\n    this.processingIndicator.show();\n\n    if (this.settings.features.sort && !$.isEmptyObject(this.settings.dataset.sorts)) { data[this.settings.params.sorts] = this.settings.dataset.sorts; }\n    if (this.settings.features.paginate && this.settings.dataset.page) {\n      var page = this.settings.dataset.page,\n          perPage = this.settings.dataset.perPage;\n      data[this.settings.params.page] = page;\n      data[this.settings.params.perPage] = perPage;\n      data[this.settings.params.offset] = (page - 1) * perPage;\n    }\n    if (this.settings.dataset.ajaxData) { $.extend(data, this.settings.dataset.ajaxData); }\n\n    // If ajax, sends query to ajaxUrl with queries and sorts serialized and appended in ajax data\n    // otherwise, executes queries and sorts on in-page data\n    if (this.settings.dataset.ajax) {\n      var _this = this;\n      var options = {\n        type: _this.settings.dataset.ajaxMethod,\n        dataType: _this.settings.dataset.ajaxDataType,\n        data: data,\n        error: function(xhr, error) {\n        },\n        success: function(response) {\n          _this.$element.trigger('dynatable:ajax:success', response);\n          // Merge ajax results and meta-data into dynatables cached data\n          _this.records.updateFromJson(response);\n          // update table with new records\n          _this.dom.update();\n\n          if (!skipPushState && _this.state.initOnLoad()) {\n            _this.state.push(data);\n          }\n        },\n        complete: function() {\n          _this.processingIndicator.hide();\n        }\n      };\n      // Do not pass url to `ajax` options if blank\n      if (this.settings.dataset.ajaxUrl) {\n        options.url = this.settings.dataset.ajaxUrl;\n\n      // If ajaxUrl is blank, then we're using the current page URL,\n      // we need to strip out any query, sort, or page data controlled by dynatable\n      // that may have been in URL when page loaded, so that it doesn't conflict with\n      // what's passed in with the data ajax parameter\n      } else {\n        options.url = utility.refreshQueryString(window.location.href, {}, this.settings);\n      }\n      if (this.settings.dataset.ajaxCache !== null) { options.cache = this.settings.dataset.ajaxCache; }\n\n      $.ajax(options);\n    } else {\n      this.records.resetOriginal();\n      this.queries.run();\n      if (this.settings.features.sort) {\n        this.records.sort();\n      }\n      if (this.settings.features.paginate) {\n        this.records.paginate();\n      }\n      this.dom.update();\n      this.processingIndicator.hide();\n\n      if (!skipPushState && this.state.initOnLoad()) {\n        this.state.push(data);\n      }\n    }\n    this.$element.trigger('dynatable:afterProcess', data);\n  };\n\n  function defaultRowWriter(rowIndex, record, columns, cellWriter) {\n    var tr = '';\n\n    // grab the record's attribute for each column\n    for (var i = 0, len = columns.length; i < len; i++) {\n      tr += cellWriter(columns[i], record);\n    }\n\n    return '<tr>' + tr + '</tr>';\n  };\n\n  function defaultCellWriter(column, record) {\n    var html = column.attributeWriter(record),\n        td = '<td';\n\n    if (column.hidden || column.textAlign) {\n      td += ' style=\"';\n\n      // keep cells for hidden column headers hidden\n      if (column.hidden) {\n        td += 'display: none;';\n      }\n\n      // keep cells aligned as their column headers are aligned\n      if (column.textAlign) {\n        td += 'text-align: ' + column.textAlign + ';';\n      }\n\n      td += '\"';\n    }\n\n    return td + '>' + html + '</td>';\n  };\n\n  function defaultAttributeWriter(record) {\n    // `this` is the column object in settings.columns\n    // TODO: automatically convert common types, such as arrays and objects, to string\n    return record[this.id];\n  };\n\n  function defaultAttributeReader(cell, record) {\n    return $(cell).html();\n  };\n\n  //-----------------------------------------------------------------\n  // Dynatable object model prototype\n  // (all object models get these default functions)\n  //-----------------------------------------------------------------\n\n  Model = {\n    initOnLoad: function() {\n      return true;\n    },\n\n    init: function() {}\n  };\n\n  for (model in modelPrototypes) {\n    if (modelPrototypes.hasOwnProperty(model)) {\n      var modelPrototype = modelPrototypes[model];\n      modelPrototype.prototype = Model;\n    }\n  }\n\n  //-----------------------------------------------------------------\n  // Dynatable object models\n  //-----------------------------------------------------------------\n\n  function Dom(obj, settings) {\n    var _this = this;\n\n    // update table contents with new records array\n    // from query (whether ajax or not)\n    this.update = function() {\n      var rows = '',\n          columns = settings.table.columns,\n          rowWriter = settings.writers._rowWriter,\n          cellWriter = settings.writers._cellWriter;\n\n      obj.$element.trigger('dynatable:beforeUpdate', rows);\n\n      // loop through records\n      for (var i = 0, len = settings.dataset.records.length; i < len; i++) {\n        var record = settings.dataset.records[i],\n            tr = rowWriter(i, record, columns, cellWriter);\n        rows += tr;\n      }\n\n      // Appended dynatable interactive elements\n      if (settings.features.recordCount) {\n        $('#dynatable-record-count-' + obj.element.id).replaceWith(obj.recordsCount.create());\n      }\n      if (settings.features.paginate) {\n        $('#dynatable-pagination-links-' + obj.element.id).replaceWith(obj.paginationLinks.create());\n        if (settings.features.perPageSelect) {\n          $('#dynatable-per-page-' + obj.element.id).val(parseInt(settings.dataset.perPage));\n        }\n      }\n\n      // Sort headers functionality\n      if (settings.features.sort && columns) {\n        obj.sortsHeaders.removeAllArrows();\n        for (var i = 0, len = columns.length; i < len; i++) {\n          var column = columns[i],\n              sortedByColumn = utility.allMatch(settings.dataset.sorts, column.sorts, function(sorts, sort) { return sort in sorts; }),\n              value = settings.dataset.sorts[column.sorts[0]];\n\n          if (sortedByColumn) {\n            obj.$element.find('[data-dynatable-column=\"' + column.id + '\"]').find('.dynatable-sort-header').each(function(){\n              if (value == 1) {\n                obj.sortsHeaders.appendArrowUp($(this));\n              } else {\n                obj.sortsHeaders.appendArrowDown($(this));\n              }\n            });\n          }\n        }\n      }\n\n      // Query search functionality\n      if (settings.inputs.queries || settings.features.search) {\n        var allQueries = settings.inputs.queries || $();\n        if (settings.features.search) {\n          allQueries = allQueries.add('#dynatable-query-search-' + obj.element.id);\n        }\n\n        allQueries.each(function() {\n          var $this = $(this),\n              q = settings.dataset.queries[$this.data('dynatable-query')];\n          $this.val(q || '');\n        });\n      }\n\n      obj.$element.find(settings.table.bodyRowSelector).remove();\n      obj.$element.append(rows);\n\n      obj.$element.trigger('dynatable:afterUpdate', rows);\n    };\n  };\n\n  function DomColumns(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return obj.$element.is('table');\n    };\n\n    this.init = function() {\n      settings.table.columns = [];\n      this.getFromTable();\n    };\n\n    // initialize table[columns] array\n    this.getFromTable = function() {\n      var $columns = obj.$element.find(settings.table.headRowSelector).children('th,td');\n      if ($columns.length) {\n        $columns.each(function(index){\n          _this.add($(this), index, true);\n        });\n      } else {\n        return $.error(\"Couldn't find any columns headers in '\" + settings.table.headRowSelector + \" th,td'. If your header row is different, specify the selector in the table: headRowSelector option.\");\n      }\n    };\n\n    this.add = function($column, position, skipAppend, skipUpdate) {\n      var columns = settings.table.columns,\n          label = $column.text(),\n          id = $column.data('dynatable-column') || utility.normalizeText(label, settings.table.defaultColumnIdStyle),\n          dataSorts = $column.data('dynatable-sorts'),\n          sorts = dataSorts ? $.map(dataSorts.split(','), function(text) { return $.trim(text); }) : [id];\n\n      // If the column id is blank, generate an id for it\n      if ( !id ) {\n        this.generate($column);\n        id = $column.data('dynatable-column');\n      }\n      // Add column data to plugin instance\n      columns.splice(position, 0, {\n        index: position,\n        label: label,\n        id: id,\n        attributeWriter: settings.writers[id] || settings.writers._attributeWriter,\n        attributeReader: settings.readers[id] || settings.readers._attributeReader,\n        sorts: sorts,\n        hidden: $column.css('display') === 'none',\n        textAlign: $column.css('text-align')\n      });\n\n      // Modify header cell\n      $column\n        .attr('data-dynatable-column', id)\n        .addClass('dynatable-head');\n      if (settings.table.headRowClass) { $column.addClass(settings.table.headRowClass); }\n\n      // Append column header to table\n      if (!skipAppend) {\n        var domPosition = position + 1,\n            $sibling = obj.$element.find(settings.table.headRowSelector)\n              .children('th:nth-child(' + domPosition + '),td:nth-child(' + domPosition + ')').first(),\n            columnsAfter = columns.slice(position + 1, columns.length);\n\n        if ($sibling.length) {\n          $sibling.before($column);\n        // sibling column doesn't yet exist (maybe this is the last column in the header row)\n        } else {\n          obj.$element.find(settings.table.headRowSelector).append($column);\n        }\n\n        obj.sortsHeaders.attachOne($column.get());\n\n        // increment the index of all columns after this one that was just inserted\n        if (columnsAfter.length) {\n          for (var i = 0, len = columnsAfter.length; i < len; i++) {\n            columnsAfter[i].index += 1;\n          }\n        }\n\n        if (!skipUpdate) {\n          obj.dom.update();\n        }\n      }\n\n      return dt;\n    };\n\n    this.remove = function(columnIndexOrId) {\n      var columns = settings.table.columns,\n          length = columns.length;\n\n      if (typeof(columnIndexOrId) === \"number\") {\n        var column = columns[columnIndexOrId];\n        this.removeFromTable(column.id);\n        this.removeFromArray(columnIndexOrId);\n      } else {\n        // Traverse columns array in reverse order so that subsequent indices\n        // don't get messed up when we delete an item from the array in an iteration\n        for (var i = columns.length - 1; i >= 0; i--) {\n          var column = columns[i];\n\n          if (column.id === columnIndexOrId) {\n            this.removeFromTable(columnIndexOrId);\n            this.removeFromArray(i);\n          }\n        }\n      }\n\n      obj.dom.update();\n    };\n\n    this.removeFromTable = function(columnId) {\n      obj.$element.find(settings.table.headRowSelector).children('[data-dynatable-column=\"' + columnId + '\"]').first()\n        .remove();\n    };\n\n    this.removeFromArray = function(index) {\n      var columns = settings.table.columns,\n          adjustColumns;\n      columns.splice(index, 1);\n      adjustColumns = columns.slice(index, columns.length);\n      for (var i = 0, len = adjustColumns.length; i < len; i++) {\n        adjustColumns[i].index -= 1;\n      }\n    };\n\n    this.generate = function($cell) {\n      var cell = $cell === undefined ? $('<th></th>') : $cell;\n      return this.attachGeneratedAttributes(cell);\n    };\n\n    this.attachGeneratedAttributes = function($cell) {\n      // Use increment to create unique column name that is the same each time the page is reloaded,\n      // in order to avoid errors with mismatched attribute names when loading cached `dataset.records` array\n      var increment = obj.$element.find(settings.table.headRowSelector).children('th[data-dynatable-generated]').length;\n      return $cell\n        .attr('data-dynatable-column', 'dynatable-generated-' + increment) //+ utility.randomHash(),\n        .attr('data-dynatable-no-sort', 'true')\n        .attr('data-dynatable-generated', increment);\n    };\n  };\n\n  function Records(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return !settings.dataset.ajax;\n    };\n\n    this.init = function() {\n      if (settings.dataset.records === null) {\n        settings.dataset.records = this.getFromTable();\n\n        if (!settings.dataset.queryRecordCount) {\n          settings.dataset.queryRecordCount = this.count();\n        }\n\n        if (!settings.dataset.totalRecordCount){\n          settings.dataset.totalRecordCount = settings.dataset.queryRecordCount;\n        }\n      }\n\n      // Create cache of original full recordset (unpaginated and unqueried)\n      settings.dataset.originalRecords = $.extend(true, [], settings.dataset.records);\n    };\n\n    // merge ajax response json with cached data including\n    // meta-data and records\n    this.updateFromJson = function(data) {\n      var records;\n      if (settings.params.records === \"_root\") {\n        records = data;\n      } else if (settings.params.records in data) {\n        records = data[settings.params.records];\n      }\n      if (settings.params.record) {\n        var len = records.length - 1;\n        for (var i = 0; i < len; i++) {\n          records[i] = records[i][settings.params.record];\n        }\n      }\n      if (settings.params.queryRecordCount in data) {\n        settings.dataset.queryRecordCount = data[settings.params.queryRecordCount];\n      }\n      if (settings.params.totalRecordCount in data) {\n        settings.dataset.totalRecordCount = data[settings.params.totalRecordCount];\n      }\n      settings.dataset.records = records;\n    };\n\n    // For really advanced sorting,\n    // see http://james.padolsey.com/javascript/sorting-elements-with-jquery/\n    this.sort = function() {\n      var sort = [].sort,\n          sorts = settings.dataset.sorts,\n          sortsKeys = settings.dataset.sortsKeys,\n          sortTypes = settings.dataset.sortTypes;\n\n      var sortFunction = function(a, b) {\n        var comparison;\n        if ($.isEmptyObject(sorts)) {\n          comparison = obj.sorts.functions['originalPlacement'](a, b);\n        } else {\n          for (var i = 0, len = sortsKeys.length; i < len; i++) {\n            var attr = sortsKeys[i],\n                direction = sorts[attr],\n                sortType = sortTypes[attr] || obj.sorts.guessType(a, b, attr);\n            comparison = obj.sorts.functions[sortType](a, b, attr, direction);\n            // Don't need to sort any further unless this sort is a tie between a and b,\n            // so break the for loop unless tied\n            if (comparison !== 0) { break; }\n          }\n        }\n        return comparison;\n      }\n\n      return sort.call(settings.dataset.records, sortFunction);\n    };\n\n    this.paginate = function() {\n      var bounds = this.pageBounds(),\n          first = bounds[0], last = bounds[1];\n      settings.dataset.records = settings.dataset.records.slice(first, last);\n    };\n\n    this.resetOriginal = function() {\n      settings.dataset.records = settings.dataset.originalRecords || [];\n    };\n\n    this.pageBounds = function() {\n      var page = settings.dataset.page || 1,\n          first = (page - 1) * settings.dataset.perPage,\n          last = Math.min(first + settings.dataset.perPage, settings.dataset.queryRecordCount);\n      return [first,last];\n    };\n\n    // get initial recordset to populate table\n    // if ajax, call ajaxUrl\n    // otherwise, initialize from in-table records\n    this.getFromTable = function() {\n      var records = [],\n          columns = settings.table.columns,\n          tableRecords = obj.$element.find(settings.table.bodyRowSelector);\n\n      tableRecords.each(function(index){\n        var record = {};\n        record['dynatable-original-index'] = index;\n        $(this).find('th,td').each(function(index) {\n          if (columns[index] === undefined) {\n            // Header cell didn't exist for this column, so let's generate and append\n            // a new header cell with a randomly generated name (so we can store and\n            // retrieve the contents of this column for each record)\n            obj.domColumns.add(obj.domColumns.generate(), columns.length, false, true); // don't skipAppend, do skipUpdate\n          }\n          var value = columns[index].attributeReader(this, record),\n              attr = columns[index].id;\n\n          // If value from table is HTML, let's get and cache the text equivalent for\n          // the default string sorting, since it rarely makes sense for sort headers\n          // to sort based on HTML tags.\n          if (typeof(value) === \"string\" && value.match(/\\s*\\<.+\\>/)) {\n            if (! record['dynatable-sortable-text']) {\n              record['dynatable-sortable-text'] = {};\n            }\n            record['dynatable-sortable-text'][attr] = $.trim($('<div></div>').html(value).text());\n          }\n\n          record[attr] = value;\n        });\n        // Allow configuration function which alters record based on attributes of\n        // table row (e.g. from html5 data- attributes)\n        if (typeof(settings.readers._rowReader) === \"function\") {\n          settings.readers._rowReader(index, this, record);\n        }\n        records.push(record);\n      });\n      return records; // 1st row is header\n    };\n\n    // count records from table\n    this.count = function() {\n      return settings.dataset.records.length;\n    };\n  };\n\n  function RecordsCount(obj, settings) {\n    this.initOnLoad = function() {\n      return settings.features.recordCount;\n    };\n\n    this.init = function() {\n      this.attach();\n    };\n\n    this.create = function() {\n      var recordsShown = obj.records.count(),\n          recordsQueryCount = settings.dataset.queryRecordCount,\n          recordsTotal = settings.dataset.totalRecordCount,\n          text = settings.inputs.recordCountText,\n          collection_name = settings.params.records;\n\n      if (recordsShown < recordsQueryCount && settings.features.paginate) {\n        var bounds = obj.records.pageBounds();\n        text += \"<span class='dynatable-record-bounds'>\" + (bounds[0] + 1) + \" to \" + bounds[1] + \"</span> of \";\n      } else if (recordsShown === recordsQueryCount && settings.features.paginate) {\n        text += recordsShown + \" of \";\n      }\n      text += recordsQueryCount + \" \" + collection_name;\n      if (recordsQueryCount < recordsTotal) {\n        text += \" (filtered from \" + recordsTotal + \" total records)\";\n      }\n\n      return $('<span></span>', {\n                id: 'dynatable-record-count-' + obj.element.id,\n                'class': 'dynatable-record-count',\n                html: text\n              });\n    };\n\n    this.attach = function() {\n      var $target = settings.inputs.recordCountTarget ? $(settings.inputs.recordCountTarget) : obj.$element;\n      $target[settings.inputs.recordCountPlacement](this.create());\n    };\n  };\n\n  function ProcessingIndicator(obj, settings) {\n    this.init = function() {\n      this.attach();\n    };\n\n    this.create = function() {\n      var $processing = $('<div></div>', {\n            html: '<span>' + settings.inputs.processingText + '</span>',\n            id: 'dynatable-processing-' + obj.element.id,\n            'class': 'dynatable-processing',\n            style: 'position: absolute; display: none;'\n          });\n\n      return $processing;\n    };\n\n    this.position = function() {\n      var $processing = $('#dynatable-processing-' + obj.element.id),\n          $span = $processing.children('span'),\n          spanHeight = $span.outerHeight(),\n          spanWidth = $span.outerWidth(),\n          $covered = obj.$element,\n          offset = $covered.offset(),\n          height = $covered.outerHeight(), width = $covered.outerWidth();\n\n      $processing\n        .offset({left: offset.left, top: offset.top})\n        .width(width)\n        .height(height)\n      $span\n        .offset({left: offset.left + ( (width - spanWidth) / 2 ), top: offset.top + ( (height - spanHeight) / 2 )});\n\n      return $processing;\n    };\n\n    this.attach = function() {\n      obj.$element.before(this.create());\n    };\n\n    this.show = function() {\n      $('#dynatable-processing-' + obj.element.id).show();\n      this.position();\n    };\n\n    this.hide = function() {\n      $('#dynatable-processing-' + obj.element.id).hide();\n    };\n  };\n\n  function State(obj, settings) {\n    this.initOnLoad = function() {\n      // Check if pushState option is true, and if browser supports it\n      return settings.features.pushState && history.pushState;\n    };\n\n    this.init = function() {\n      window.onpopstate = function(event) {\n        if (event.state && event.state.dynatable) {\n          obj.state.pop(event);\n        }\n      }\n    };\n\n    this.push = function(data) {\n      var urlString = window.location.search,\n          urlOptions,\n          path,\n          params,\n          hash,\n          newParams,\n          cacheStr,\n          cache,\n          // replaceState on initial load, then pushState after that\n          firstPush = !(window.history.state && window.history.state.dynatable),\n          pushFunction = firstPush ? 'replaceState' : 'pushState';\n\n      if (urlString && /^\\?/.test(urlString)) { urlString = urlString.substring(1); }\n      $.extend(urlOptions, data);\n\n      params = utility.refreshQueryString(urlString, data, settings);\n      if (params) { params = '?' + params; }\n      hash = window.location.hash;\n      path = window.location.pathname;\n\n      obj.$element.trigger('dynatable:push', data);\n\n      cache = { dynatable: { dataset: settings.dataset } };\n      if (!firstPush) { cache.dynatable.scrollTop = $(window).scrollTop(); }\n      cacheStr = JSON.stringify(cache);\n\n      // Mozilla has a 640k char limit on what can be stored in pushState.\n      // See \"limit\" in https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history#The_pushState().C2.A0method\n      // and \"dataStr.length\" in http://wine.git.sourceforge.net/git/gitweb.cgi?p=wine/wine-gecko;a=patch;h=43a11bdddc5fc1ff102278a120be66a7b90afe28\n      //\n      // Likewise, other browsers may have varying (undocumented) limits.\n      // Also, Firefox's limit can be changed in about:config as browser.history.maxStateObjectSize\n      // Since we don't know what the actual limit will be in any given situation, we'll just try caching and rescue\n      // any exceptions by retrying pushState without caching the records.\n      //\n      // I have absolutely no idea why perPageOptions suddenly becomes an array-like object instead of an array,\n      // but just recently, this started throwing an error if I don't convert it:\n      // 'Uncaught Error: DATA_CLONE_ERR: DOM Exception 25'\n      cache.dynatable.dataset.perPageOptions = $.makeArray(cache.dynatable.dataset.perPageOptions);\n\n      try {\n        window.history[pushFunction](cache, \"Dynatable state\", path + params + hash);\n      } catch(error) {\n        // Make cached records = null, so that `pop` will rerun process to retrieve records\n        cache.dynatable.dataset.records = null;\n        window.history[pushFunction](cache, \"Dynatable state\", path + params + hash);\n      }\n    };\n\n    this.pop = function(event) {\n      var data = event.state.dynatable;\n      settings.dataset = data.dataset;\n\n      if (data.scrollTop) { $(window).scrollTop(data.scrollTop); }\n\n      // If dataset.records is cached from pushState\n      if ( data.dataset.records ) {\n        obj.dom.update();\n      } else {\n        obj.process(true);\n      }\n    };\n  };\n\n  function Sorts(obj, settings) {\n    this.initOnLoad = function() {\n      return settings.features.sort;\n    };\n\n    this.init = function() {\n      var sortsUrl = window.location.search.match(new RegExp(settings.params.sorts + '[^&=]*=[^&]*', 'g'));\n      settings.dataset.sorts = sortsUrl ? utility.deserialize(sortsUrl)[settings.params.sorts] : {};\n      settings.dataset.sortsKeys = sortsUrl ? utility.keysFromObject(settings.dataset.sorts) : [];\n    };\n\n    this.add = function(attr, direction) {\n      var sortsKeys = settings.dataset.sortsKeys,\n          index = $.inArray(attr, sortsKeys);\n      settings.dataset.sorts[attr] = direction;\n      if (index === -1) { sortsKeys.push(attr); }\n      return dt;\n    };\n\n    this.remove = function(attr) {\n      var sortsKeys = settings.dataset.sortsKeys,\n          index = $.inArray(attr, sortsKeys);\n      delete settings.dataset.sorts[attr];\n      if (index !== -1) { sortsKeys.splice(index, 1); }\n      return dt;\n    };\n\n    this.clear = function() {\n      settings.dataset.sorts = {};\n      settings.dataset.sortsKeys.length = 0;\n    };\n\n    // Try to intelligently guess which sort function to use\n    // based on the type of attribute values.\n    // Consider using something more robust than `typeof` (http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/)\n    this.guessType = function(a, b, attr) {\n      var types = {\n            string: 'string',\n            number: 'number',\n            'boolean': 'number',\n            object: 'number' // dates and null values are also objects, this works...\n          },\n          attrType = a[attr] ? typeof(a[attr]) : typeof(b[attr]),\n          type = types[attrType] || 'number';\n      return type;\n    };\n\n    // Built-in sort functions\n    // (the most common use-cases I could think of)\n    this.functions = {\n      number: function(a, b, attr, direction) {\n        return a[attr] === b[attr] ? 0 : (direction > 0 ? a[attr] - b[attr] : b[attr] - a[attr]);\n      },\n      string: function(a, b, attr, direction) {\n        var aAttr = (a['dynatable-sortable-text'] && a['dynatable-sortable-text'][attr]) ? a['dynatable-sortable-text'][attr] : a[attr],\n            bAttr = (b['dynatable-sortable-text'] && b['dynatable-sortable-text'][attr]) ? b['dynatable-sortable-text'][attr] : b[attr],\n            comparison;\n        aAttr = aAttr.toLowerCase();\n        bAttr = bAttr.toLowerCase();\n        comparison = aAttr === bAttr ? 0 : (direction > 0 ? aAttr > bAttr : bAttr > aAttr);\n        // force false boolean value to -1, true to 1, and tie to 0\n        return comparison === false ? -1 : (comparison - 0);\n      },\n      originalPlacement: function(a, b) {\n        return a['dynatable-original-index'] - b['dynatable-original-index'];\n      }\n    };\n  };\n\n  // turn table headers into links which add sort to sorts array\n  function SortsHeaders(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return settings.features.sort;\n    };\n\n    this.init = function() {\n      this.attach();\n    };\n\n    this.create = function(cell) {\n      var $cell = $(cell),\n          $link = $('<a></a>', {\n            'class': 'dynatable-sort-header',\n            href: '#',\n            html: $cell.html()\n          }),\n          id = $cell.data('dynatable-column'),\n          column = utility.findObjectInArray(settings.table.columns, {id: id});\n\n      $link.bind('click', function(e) {\n        _this.toggleSort(e, $link, column);\n        obj.process();\n\n        e.preventDefault();\n      });\n\n      if (this.sortedByColumn($link, column)) {\n        if (this.sortedByColumnValue(column) == 1) {\n          this.appendArrowUp($link);\n        } else {\n          this.appendArrowDown($link);\n        }\n      }\n\n      return $link;\n    };\n\n    this.removeAll = function() {\n      obj.$element.find(settings.table.headRowSelector).children('th,td').each(function(){\n        _this.removeAllArrows();\n        _this.removeOne(this);\n      });\n    };\n\n    this.removeOne = function(cell) {\n      var $cell = $(cell),\n          $link = $cell.find('.dynatable-sort-header');\n      if ($link.length) {\n        var html = $link.html();\n        $link.remove();\n        $cell.html($cell.html() + html);\n      }\n    };\n\n    this.attach = function() {\n      obj.$element.find(settings.table.headRowSelector).children('th,td').each(function(){\n        _this.attachOne(this);\n      });\n    };\n\n    this.attachOne = function(cell) {\n      var $cell = $(cell);\n      if (!$cell.data('dynatable-no-sort')) {\n        $cell.html(this.create(cell));\n      }\n    };\n\n    this.appendArrowUp = function($link) {\n      this.removeArrow($link);\n      $link.append(\"<span class='dynatable-arrow'> &#9650;</span>\");\n    };\n\n    this.appendArrowDown = function($link) {\n      this.removeArrow($link);\n      $link.append(\"<span class='dynatable-arrow'> &#9660;</span>\");\n    };\n\n    this.removeArrow = function($link) {\n      // Not sure why `parent()` is needed, the arrow should be inside the link from `append()` above\n      $link.find('.dynatable-arrow').remove();\n    };\n\n    this.removeAllArrows = function() {\n      obj.$element.find('.dynatable-arrow').remove();\n    };\n\n    this.toggleSort = function(e, $link, column) {\n      var sortedByColumn = this.sortedByColumn($link, column),\n          value = this.sortedByColumnValue(column);\n      // Clear existing sorts unless this is a multisort event\n      if (!settings.inputs.multisort || !utility.anyMatch(e, settings.inputs.multisort, function(evt, key) { return e[key]; })) {\n        this.removeAllArrows();\n        obj.sorts.clear();\n      }\n\n      // If sorts for this column are already set\n      if (sortedByColumn) {\n        // If ascending, then make descending\n        if (value == 1) {\n          for (var i = 0, len = column.sorts.length; i < len; i++) {\n            obj.sorts.add(column.sorts[i], -1);\n          }\n          this.appendArrowDown($link);\n        // If descending, remove sort\n        } else {\n          for (var i = 0, len = column.sorts.length; i < len; i++) {\n            obj.sorts.remove(column.sorts[i]);\n          }\n          this.removeArrow($link);\n        }\n      // Otherwise, if not already set, set to ascending\n      } else {\n        for (var i = 0, len = column.sorts.length; i < len; i++) {\n          obj.sorts.add(column.sorts[i], 1);\n        }\n        this.appendArrowUp($link);\n      }\n    };\n\n    this.sortedByColumn = function($link, column) {\n      return utility.allMatch(settings.dataset.sorts, column.sorts, function(sorts, sort) { return sort in sorts; });\n    };\n\n    this.sortedByColumnValue = function(column) {\n      return settings.dataset.sorts[column.sorts[0]];\n    };\n  };\n\n  function Queries(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return settings.inputs.queries || settings.features.search;\n    };\n\n    this.init = function() {\n      var queriesUrl = window.location.search.match(new RegExp(settings.params.queries + '[^&=]*=[^&]*', 'g'));\n\n      settings.dataset.queries = queriesUrl ? utility.deserialize(queriesUrl)[settings.params.queries] : {};\n      if (settings.dataset.queries === \"\") { settings.dataset.queries = {}; }\n\n      if (settings.inputs.queries) {\n        this.setupInputs();\n      }\n    };\n\n    this.add = function(name, value) {\n      // reset to first page since query will change records\n      if (settings.features.paginate) {\n        settings.dataset.page = 1;\n      }\n      settings.dataset.queries[name] = value;\n      return dt;\n    };\n\n    this.remove = function(name) {\n      delete settings.dataset.queries[name];\n      return dt;\n    };\n\n    this.run = function() {\n      for (query in settings.dataset.queries) {\n        if (settings.dataset.queries.hasOwnProperty(query)) {\n          var value = settings.dataset.queries[query];\n          if (_this.functions[query] === undefined) {\n            // Try to lazily evaluate query from column names if not explicitly defined\n            var queryColumn = utility.findObjectInArray(settings.table.columns, {id: query});\n            if (queryColumn) {\n              _this.functions[query] = function(record, queryValue) {\n                return record[query] == queryValue;\n              };\n            } else {\n              $.error(\"Query named '\" + query + \"' called, but not defined in queries.functions\");\n              continue; // to skip to next query\n            }\n          }\n          // collect all records that return true for query\n          settings.dataset.records = $.map(settings.dataset.records, function(record) {\n            return _this.functions[query](record, value) ? record : null;\n          });\n        }\n      }\n      settings.dataset.queryRecordCount = obj.records.count();\n    };\n\n    // Shortcut for performing simple query from built-in search\n    this.runSearch = function(q) {\n      var origQueries = $.extend({}, settings.dataset.queries);\n      if (q) {\n        this.add('search', q);\n      } else {\n        this.remove('search');\n      }\n      if (!utility.objectsEqual(settings.dataset.queries, origQueries)) {\n        obj.process();\n      }\n    };\n\n    this.setupInputs = function() {\n      settings.inputs.queries.each(function() {\n        var $this = $(this),\n            event = $this.data('dynatable-query-event') || settings.inputs.queryEvent,\n            query = $this.data('dynatable-query') || $this.attr('name') || this.id,\n            queryFunction = function(e) {\n              var q = $(this).val();\n              if (q === \"\") { q = undefined; }\n              if (q === settings.dataset.queries[query]) { return false; }\n              if (q) {\n                _this.add(query, q);\n              } else {\n                _this.remove(query);\n              }\n              obj.process();\n              e.preventDefault();\n            };\n\n        $this\n          .attr('data-dynatable-query', query)\n          .bind(event, queryFunction)\n          .bind('keypress', function(e) {\n            if (e.which == 13) {\n              queryFunction.call(this, e);\n            }\n          });\n\n        if (settings.dataset.queries[query]) { $this.val(decodeURIComponent(settings.dataset.queries[query])); }\n      });\n    };\n\n    // Query functions for in-page querying\n    // each function should take a record and a value as input\n    // and output true of false as to whether the record is a match or not\n    this.functions = {\n      search: function(record, queryValue) {\n        var contains = false;\n        // Loop through each attribute of record\n        for (attr in record) {\n          if (record.hasOwnProperty(attr)) {\n            var attrValue = record[attr];\n            if (typeof(attrValue) === \"string\" && attrValue.toLowerCase().indexOf(queryValue.toLowerCase()) !== -1) {\n              contains = true;\n              // Don't need to keep searching attributes once found\n              break;\n            } else {\n              continue;\n            }\n          }\n        }\n        return contains;\n      }\n    };\n  };\n\n  function InputsSearch(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return settings.features.search;\n    };\n\n    this.init = function() {\n      this.attach();\n    };\n\n    this.create = function() {\n      var $search = $('<input />', {\n            type: 'search',\n            id: 'dynatable-query-search-' + obj.element.id,\n            'data-dynatable-query': 'search',\n            value: settings.dataset.queries.search\n          }),\n          $searchSpan = $('<span></span>', {\n            id: 'dynatable-search-' + obj.element.id,\n            'class': 'dynatable-search',\n            text: 'Search: '\n          }).append($search);\n\n      $search\n        .bind(settings.inputs.queryEvent, function() {\n          obj.queries.runSearch($(this).val());\n        })\n        .bind('keypress', function(e) {\n          if (e.which == 13) {\n            obj.queries.runSearch($(this).val());\n            e.preventDefault();\n          }\n        });\n      return $searchSpan;\n    };\n\n    this.attach = function() {\n      var $target = settings.inputs.searchTarget ? $(settings.inputs.searchTarget) : obj.$element;\n      $target[settings.inputs.searchPlacement](this.create());\n    };\n  };\n\n  // provide a public function for selecting page\n  function PaginationPage(obj, settings) {\n    this.initOnLoad = function() {\n      return settings.features.paginate;\n    };\n\n    this.init = function() {\n      var pageUrl = window.location.search.match(new RegExp(settings.params.page + '=([^&]*)'));\n      // If page is present in URL parameters and pushState is enabled\n      // (meaning that it'd be possible for dynatable to have put the\n      // page parameter in the URL)\n      if (pageUrl && settings.features.pushState) {\n        this.set(pageUrl[1]);\n      } else {\n        this.set(1);\n      }\n    };\n\n    this.set = function(page) {\n      settings.dataset.page = parseInt(page, 10);\n    }\n  };\n\n  function PaginationPerPage(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return settings.features.paginate;\n    };\n\n    this.init = function() {\n      var perPageUrl = window.location.search.match(new RegExp(settings.params.perPage + '=([^&]*)'));\n\n      // If perPage is present in URL parameters and pushState is enabled\n      // (meaning that it'd be possible for dynatable to have put the\n      // perPage parameter in the URL)\n      if (perPageUrl && settings.features.pushState) {\n        // Don't reset page to 1 on init, since it might override page\n        // set on init from URL\n        this.set(perPageUrl[1], true);\n      } else {\n        this.set(settings.dataset.perPageDefault, true);\n      }\n\n      if (settings.features.perPageSelect) {\n        this.attach();\n      }\n    };\n\n    this.create = function() {\n      var $select = $('<select>', {\n            id: 'dynatable-per-page-' + obj.element.id,\n            'class': 'dynatable-per-page-select'\n          });\n\n      for (var i = 0, len = settings.dataset.perPageOptions.length; i < len; i++) {\n        var number = settings.dataset.perPageOptions[i],\n            selected = settings.dataset.perPage == number ? 'selected=\"selected\"' : '';\n        $select.append('<option value=\"' + number + '\" ' + selected + '>' + number + '</option>');\n      }\n\n      $select.bind('change', function(e) {\n        _this.set($(this).val());\n        obj.process();\n      });\n\n      return $('<span />', {\n        'class': 'dynatable-per-page'\n      }).append(\"<span class='dynatable-per-page-label'>\" + settings.inputs.perPageText + \"</span>\").append($select);\n    };\n\n    this.attach = function() {\n      var $target = settings.inputs.perPageTarget ? $(settings.inputs.perPageTarget) : obj.$element;\n      $target[settings.inputs.perPagePlacement](this.create());\n    };\n\n    this.set = function(number, skipResetPage) {\n      if (!skipResetPage) { obj.paginationPage.set(1); }\n      settings.dataset.perPage = parseInt(number);\n    };\n  };\n\n  // pagination links which update dataset.page attribute\n  function PaginationLinks(obj, settings) {\n    var _this = this;\n\n    this.initOnLoad = function() {\n      return settings.features.paginate;\n    };\n\n    this.init = function() {\n      this.attach();\n    };\n\n    this.create = function() {\n      var pageLinks = '<ul id=\"' + 'dynatable-pagination-links-' + obj.element.id + '\" class=\"' + settings.inputs.paginationClass + '\">',\n          pageLinkClass = settings.inputs.paginationLinkClass,\n          activePageClass = settings.inputs.paginationActiveClass,\n          disabledPageClass = settings.inputs.paginationDisabledClass,\n          pages = Math.ceil(settings.dataset.queryRecordCount / settings.dataset.perPage),\n          page = settings.dataset.page,\n          breaks = [\n            settings.inputs.paginationGap[0],\n            settings.dataset.page - settings.inputs.paginationGap[1],\n            settings.dataset.page + settings.inputs.paginationGap[2],\n            (pages + 1) - settings.inputs.paginationGap[3]\n          ];\n\n      pageLinks += '<li><span>Pages: </span></li>';\n\n      for (var i = 1; i <= pages; i++) {\n        if ( (i > breaks[0] && i < breaks[1]) || (i > breaks[2] && i < breaks[3])) {\n          // skip to next iteration in loop\n          continue;\n        } else {\n          var li = obj.paginationLinks.buildLink(i, i, pageLinkClass, page == i, activePageClass),\n              breakIndex,\n              nextBreak;\n\n          // If i is not between one of the following\n          // (1 + (settings.paginationGap[0]))\n          // (page - settings.paginationGap[1])\n          // (page + settings.paginationGap[2])\n          // (pages - settings.paginationGap[3])\n          breakIndex = $.inArray(i, breaks);\n          nextBreak = breaks[breakIndex + 1];\n          if (breakIndex > 0 && i !== 1 && nextBreak && nextBreak > (i + 1)) {\n            var ellip = '<li><span class=\"dynatable-page-break\">&hellip;</span></li>';\n            li = breakIndex < 2 ? ellip + li : li + ellip;\n          }\n\n          if (settings.inputs.paginationPrev && i === 1) {\n            var prevLi = obj.paginationLinks.buildLink(page - 1, settings.inputs.paginationPrev, pageLinkClass + ' ' + settings.inputs.paginationPrevClass, page === 1, disabledPageClass);\n            li = prevLi + li;\n          }\n          if (settings.inputs.paginationNext && i === pages) {\n            var nextLi = obj.paginationLinks.buildLink(page + 1, settings.inputs.paginationNext, pageLinkClass + ' ' + settings.inputs.paginationNextClass, page === pages, disabledPageClass);\n            li += nextLi;\n          }\n\n          pageLinks += li;\n        }\n      }\n\n      pageLinks += '</ul>';\n\n      // only bind page handler to non-active and non-disabled page links\n      var selector = '#dynatable-pagination-links-' + obj.element.id + ' a.' + pageLinkClass + ':not(.' + activePageClass + ',.' + disabledPageClass + ')';\n      // kill any existing delegated-bindings so they don't stack up\n      $(document).undelegate(selector, 'click.dynatable');\n      $(document).delegate(selector, 'click.dynatable', function(e) {\n        $this = $(this);\n        $this.closest(settings.inputs.paginationClass).find('.' + activePageClass).removeClass(activePageClass);\n        $this.addClass(activePageClass);\n\n        obj.paginationPage.set($this.data('dynatable-page'));\n        obj.process();\n        e.preventDefault();\n      });\n\n      return pageLinks;\n    };\n\n    this.buildLink = function(page, label, linkClass, conditional, conditionalClass) {\n      var link = '<a data-dynatable-page=' + page + ' class=\"' + linkClass,\n          li = '<li';\n\n      if (conditional) {\n        link += ' ' + conditionalClass;\n        li += ' class=\"' + conditionalClass + '\"';\n      }\n\n      link += '\">' + label + '</a>';\n      li += '>' + link + '</li>';\n\n      return li;\n    };\n\n    this.attach = function() {\n      // append page links *after* delegate-event-binding so it doesn't need to\n      // find and select all page links to bind event\n      var $target = settings.inputs.paginationLinkTarget ? $(settings.inputs.paginationLinkTarget) : obj.$element;\n      $target[settings.inputs.paginationLinkPlacement](obj.paginationLinks.create());\n    };\n  };\n\n  utility = dt.utility = {\n    normalizeText: function(text, style) {\n      text = this.textTransform[style](text);\n      return text;\n    },\n    textTransform: {\n      trimDash: function(text) {\n        return text.replace(/^\\s+|\\s+$/g, \"\").replace(/\\s+/g, \"-\");\n      },\n      camelCase: function(text) {\n        text = this.trimDash(text);\n        return text\n          .replace(/(\\-[a-zA-Z])/g, function($1){return $1.toUpperCase().replace('-','');})\n          .replace(/([A-Z])([A-Z]+)/g, function($1,$2,$3){return $2 + $3.toLowerCase();})\n          .replace(/^[A-Z]/, function($1){return $1.toLowerCase();});\n      },\n      dashed: function(text) {\n        text = this.trimDash(text);\n        return this.lowercase(text);\n      },\n      underscore: function(text) {\n        text = this.trimDash(text);\n        return this.lowercase(text.replace(/(-)/g, '_'));\n      },\n      lowercase: function(text) {\n        return text.replace(/([A-Z])/g, function($1){return $1.toLowerCase();});\n      }\n    },\n    // Deserialize params in URL to object\n    // see http://stackoverflow.com/questions/1131630/javascript-jquery-param-inverse-function/3401265#3401265\n    deserialize: function(query) {\n      if (!query) return {};\n      // modified to accept an array of partial URL strings\n      if (typeof(query) === \"object\") { query = query.join('&'); }\n\n      var hash = {},\n          vars = query.split(\"&\");\n\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\"),\n            k = decodeURIComponent(pair[0]),\n            v, m;\n\n        if (!pair[1]) { continue };\n        v = decodeURIComponent(pair[1].replace(/\\+/g, ' '));\n\n        // modified to parse multi-level parameters (e.g. \"hi[there][dude]=whatsup\" => hi: {there: {dude: \"whatsup\"}})\n        while (m = k.match(/([^&=]+)\\[([^&=]+)\\]$/)) {\n          var origV = v;\n          k = m[1];\n          v = {};\n\n          // If nested param ends in '][', then the regex above erroneously included half of a trailing '[]',\n          // which indicates the end-value is part of an array\n          if (m[2].substr(m[2].length-2) == '][') { // must use substr for IE to understand it\n            v[m[2].substr(0,m[2].length-2)] = [origV];\n          } else {\n            v[m[2]] = origV;\n          }\n        }\n\n        // If it is the first entry with this name\n        if (typeof hash[k] === \"undefined\") {\n          if (k.substr(k.length-2) != '[]') { // not end with []. cannot use negative index as IE doesn't understand it\n            hash[k] = v;\n          } else {\n            hash[k] = [v];\n          }\n        // If subsequent entry with this name and not array\n        } else if (typeof hash[k] === \"string\") {\n          hash[k] = v;  // replace it\n        // modified to add support for objects\n        } else if (typeof hash[k] === \"object\") {\n          hash[k] = $.extend({}, hash[k], v);\n        // If subsequent entry with this name and is array\n        } else {\n          hash[k].push(v);\n        }\n      }\n      return hash;\n    },\n    refreshQueryString: function(urlString, data, settings) {\n      var _this = this,\n          queryString = urlString.split('?'),\n          path = queryString.shift(),\n          urlOptions;\n\n      urlOptions = this.deserialize(urlString);\n\n      // Loop through each dynatable param and update the URL with it\n      for (attr in settings.params) {\n        if (settings.params.hasOwnProperty(attr)) {\n          var label = settings.params[attr];\n          // Skip over parameters matching attributes for disabled features (i.e. leave them untouched),\n          // because if the feature is turned off, then parameter name is a coincidence and it's unrelated to dynatable.\n          if (\n            (!settings.features.sort && attr == \"sorts\") ||\n              (!settings.features.paginate && _this.anyMatch(attr, [\"page\", \"perPage\", \"offset\"], function(attr, param) { return attr == param; }))\n          ) {\n            continue;\n          }\n\n          // Delete page and offset from url params if on page 1 (default)\n          if ((attr === \"page\" || attr === \"offset\") && data[\"page\"] === 1) {\n            if (urlOptions[label]) {\n              delete urlOptions[label];\n            }\n            continue;\n          }\n\n          // Delete perPage from url params if default perPage value\n          if (attr === \"perPage\" && data[label] == settings.dataset.perPageDefault) {\n            if (urlOptions[label]) {\n              delete urlOptions[label];\n            }\n            continue;\n          }\n\n          // For queries, we're going to handle each possible query parameter individually here instead of\n          // handling the entire queries object below, since we need to make sure that this is a query controlled by dynatable.\n          if (attr == \"queries\" && data[label]) {\n            var queries = settings.inputs.queries || [],\n                inputQueries = $.makeArray(queries.map(function() { return $(this).attr('name') }));\n\n            if (settings.features.search) { inputQueries.push('search'); }\n\n            for (var i = 0, len = inputQueries.length; i < len; i++) {\n              var attr = inputQueries[i];\n              if (data[label][attr]) {\n                if (typeof urlOptions[label] === 'undefined') { urlOptions[label] = {}; }\n                urlOptions[label][attr] = data[label][attr];\n              } else {\n                delete urlOptions[label][attr];\n              }\n            }\n            continue;\n          }\n\n          // If we haven't returned true by now, then we actually want to update the parameter in the URL\n          if (data[label]) {\n            urlOptions[label] = data[label];\n          } else {\n            delete urlOptions[label];\n          }\n        }\n      }\n      return decodeURI($.param(urlOptions));\n    },\n    // Get array of keys from object\n    // see http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object/208020#208020\n    keysFromObject: function(obj){\n      var keys = [];\n      for (var key in obj){\n        keys.push(key);\n      }\n      return keys;\n    },\n    // Find an object in an array of objects by attributes.\n    // E.g. find object with {id: 'hi', name: 'there'} in an array of objects\n    findObjectInArray: function(array, objectAttr) {\n      var _this = this,\n          foundObject;\n      for (var i = 0, len = array.length; i < len; i++) {\n        var item = array[i];\n        // For each object in array, test to make sure all attributes in objectAttr match\n        if (_this.allMatch(item, objectAttr, function(item, key, value) { return item[key] == value; })) {\n          foundObject = item;\n          break;\n        }\n      }\n      return foundObject;\n    },\n    // Return true if supplied test function passes for ALL items in an array\n    allMatch: function(item, arrayOrObject, test) {\n      // start off with true result by default\n      var match = true,\n          isArray = $.isArray(arrayOrObject);\n      // Loop through all items in array\n      $.each(arrayOrObject, function(key, value) {\n        var result = isArray ? test(item, value) : test(item, key, value);\n        // If a single item tests false, go ahead and break the array by returning false\n        // and return false as result,\n        // otherwise, continue with next iteration in loop\n        // (if we make it through all iterations without overriding match with false,\n        // then we can return the true result we started with by default)\n        if (!result) { return match = false; }\n      });\n      return match;\n    },\n    // Return true if supplied test function passes for ANY items in an array\n    anyMatch: function(item, arrayOrObject, test) {\n      var match = false,\n          isArray = $.isArray(arrayOrObject);\n\n      $.each(arrayOrObject, function(key, value) {\n        var result = isArray ? test(item, value) : test(item, key, value);\n        if (result) {\n          // As soon as a match is found, set match to true, and return false to stop the `$.each` loop\n          match = true;\n          return false;\n        }\n      });\n      return match;\n    },\n    // Return true if two objects are equal\n    // (i.e. have the same attributes and attribute values)\n    objectsEqual: function(a, b) {\n      for (attr in a) {\n        if (a.hasOwnProperty(attr)) {\n          if (!b.hasOwnProperty(attr) || a[attr] !== b[attr]) {\n            return false;\n          }\n        }\n      }\n      for (attr in b) {\n        if (b.hasOwnProperty(attr) && !a.hasOwnProperty(attr)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    // Taken from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/105074#105074\n    randomHash: function() {\n      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n    }\n  };\n\n  //-----------------------------------------------------------------\n  // Build the dynatable plugin\n  //-----------------------------------------------------------------\n\n  // Object.create support test, and fallback for browsers without it\n  if ( typeof Object.create !== \"function\" ) {\n    Object.create = function (o) {\n      function F() {}\n      F.prototype = o;\n      return new F();\n    };\n  }\n\n  //-----------------------------------------------------------------\n  // Global dynatable plugin setting defaults\n  //-----------------------------------------------------------------\n\n  $.dynatableSetup = function(options) {\n    defaults = mergeSettings(options);\n  };\n\n  // Create dynatable plugin based on a defined object\n  $.dynatable = function( object ) {\n    $.fn['dynatable'] = function( options ) {\n      return this.each(function() {\n        if ( ! $.data( this, 'dynatable' ) ) {\n          $.data( this, 'dynatable', Object.create(object).init(this, options) );\n        }\n      });\n    };\n  };\n\n  $.dynatable(dt);\n\n})(jQuery);\n","name":"node_modules/dynatable/jquery.dynatable.js"}},"hash":"37c5b2a05547677ae6e06baeeaa73f74","dependencyBlock":{"type":"DependenciesBlock","dependencies":[],"variables":[],"blocks":[]},"source":{"_cachedSource":{"source":{"type":"ReplaceSource","replacements":[]},"hash":"37c5b2a05547677ae6e06baeeaa73f74"}}}